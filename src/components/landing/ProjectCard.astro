---
import type { Project } from "../../types/project";
import { useTranslations } from "../../i18n/utils";
import type { Lang } from "../../types/lang";

interface Props {
  project: Project;
}

const getProjectStatus = (status: string) => {
  if (status === "completed") return "Completed";
  if (status === "in-progress") return "In Progress";
  if (status === "not-started") return "Coming Soon";
};

const currentLang = Astro.currentLocale as Lang;
const transtaledLabels = useTranslations(currentLang);

const { project } = Astro.props as Props;
---

<div class={`project ${project.status}`}>
  <span class="project-header">
    <h3 class="project-title heading-3">{project.title}</h3>
    <span class="project-hover">
      <img
        src="/icons/hand.svg"
        alt="Web Search"
        title="Read more about this project"
      />
      <p class="heading-4">{transtaledLabels("hoverToMoreDetails")}</p>
    </span>
  </span>

  <div class="project-content">
    <div class="project-description">
      <p class="heading-4 description">
        {
          project.description
            .split("/")
            .map((text) =>
              !text.includes("*") ? (
                text
              ) : (
                <span class="highlight">{text.replaceAll("*", "")}</span>
              )
            )
        }
      </p>
      <p class="heading-4 shortDescription">
        {
          project.shortDescription
            .split("/")
            .map((text) =>
              !text.includes("*") ? (
                text
              ) : (
                <span class="highlight">{text.replaceAll("*", "")}</span>
              )
            )
        }
      </p>
    </div>

    <div class="project-details">
      <div class="achievements">
        <h4 class="heading-4">{transtaledLabels("key-achievements")}</h4>
        <ul>
          {
            project.achivements.map((achievement) => (
              <li class="heading-4">{achievement}</li>
            ))
          }
        </ul>
      </div>
    </div>
  </div>

  <div class="project-footer">
    <div class="project-status">
      <div class={`status-dot ${project.status}`}></div>
      <p class="heading-4">{getProjectStatus(project.status)}</p>
    </div>

    <div class="tech-stack">
      {
        project.stack?.map((tech) => (
          <span class="tech-item heading-4" title={tech.name}>
            <img src={tech.icon} alt={tech.name} />
            <span class="tech-name">{tech.name}</span>
          </span>
        ))
      }
    </div>

    <div class="action-links">
      {
        project.code && (
          <a
            href={project.code}
            target="_blank"
            rel="noopener noreferrer"
            class="action-button code"
          >
            <span class="heading-4">Code</span>
            <img src="/icons/github.svg" alt="View code on GitHub" />
          </a>
        )
      }
      {
        project.link && (
          <a
            href={project.link}
            target="_blank"
            rel="noopener noreferrer"
            class="action-button demo"
          >
            <span class="heading-4">Demo</span>
            <img src="/icons/web_link.svg" alt="View live demo" />
          </a>
        )
      }
    </div>
  </div>
</div>

<style>
  /* Base project card styles */
  .project {
    --card-padding: 2.5rem;
    --card-border-radius: 12px;
    --card-bg-color: rgba(17, 17, 17, 0.7);
    --card-border-color: rgba(255, 136, 0, 0.1);
    --accent-color: #f80;
    --text-color: rgba(255, 255, 255, 0.8);
    --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);

    display: flex;
    flex-direction: column;
    gap: 2rem;
    background-color: var(--card-bg-color);
    padding: var(--card-padding);
    border-radius: var(--card-border-radius);
    border: 1px solid var(--card-border-color);
    transition: all 0.4s var(--transition-timing);
    backdrop-filter: blur(10px);
    position: relative;
    overflow: hidden;
    height: auto;
    min-height: 250px;
    max-height: 250px;

    &:hover {
      max-height: 800px;
      transition: max-height 0.6s var(--transition-timing);

      .shortDescription {
        display: none;
        transition: display 0s var(--transition-timing) 0.1s;
      }

      .description {
        display: block;
        animation: fadeIn 0.5s var(--transition-timing);
      }
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Hover effect gradient */
  .project::before {
    content: "";
    position: absolute;
    inset: 0;
    background: radial-gradient(
      800px circle at var(--mouse-x) var(--mouse-y),
      rgba(255, 136, 0, 0.06),
      transparent 40%
    );
    opacity: 0;
    transition: opacity 0.3s var(--transition-timing);
    z-index: 1;
    pointer-events: none;
  }

  .project:hover::before {
    opacity: 1;
  }

  /* Header section */
  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1.5rem;
  }

  .project-title {
    background: linear-gradient(90deg, var(--accent-color), var(--text-color));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-size: 1.8rem;
    position: relative;
    padding-bottom: 0.5rem;

    &::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 60px;
      height: 3px;
      background: linear-gradient(90deg, var(--accent-color), transparent);
      transition: width 0.5s var(--transition-timing);
    }
  }

  .project:hover .project-title::after {
    width: 100%;
  }

  /* Project hover and content */
  .project-hover {
    display: flex;
    align-items: center;
    gap: 1rem;
    cursor: pointer;
    transition: all 0.3s var(--transition-timing);
  }

  .project-content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 4rem;
    transition: all 0.4s var(--transition-timing);
  }

  .project:hover .project-content {
    grid-template-columns: 1fr 1fr;
  }

  /* Description styles */
  .project-description {
    line-height: 1.6;
    color: var(--text-color);
    transition: all 0.3s var(--transition-timing);
  }

  .description {
    display: none;
    animation: fadeOut 1s var(--transition-timing);
  }

  .shortDescription {
    display: block;
    animation: fadeIn 1s var(--transition-timing);
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  .highlight {
    color: var(--accent-color);
    font-weight: 500;
  }

  /* Project details */
  .project-details {
    opacity: 0;
    transform: translateX(20px);
    transition: all 0.4s var(--transition-timing) 0.1s;
  }

  .project:hover .project-details,
  .project:hover .project-footer {
    opacity: 1;
    transform: translateX(0);
  }

  /* Achievements list */
  .achievements {
    ul {
      list-style: none;
      padding: 0;
      margin: 1rem 0;
    }

    li {
      margin: 0.5rem 0;
      padding-left: 2rem;
      position: relative;
      color: var(--text-color);
      transition: transform 0.2s var(--transition-timing);

      &::before {
        content: "â†’";
        position: absolute;
        left: 0;
        color: var(--accent-color);
      }
    }
  }

  .achievements li:hover {
    transform: translateX(10px);
  }

  /* Footer section */
  .project-footer {
    opacity: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
    padding-top: 1.5rem;
    border-top: 1px solid var(--card-border-color);
    transition: opacity 0.5s var(--transition-timing) 0.2s;
  }

  /* Status indicators */
  .project-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .status-dot {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;

    &.completed {
      background-color: #29cc4c;
    }
    &.in-progress {
      background-color: #00b4ff;
    }
    &.not-started {
      background-color: var(--accent-color);
    }
  }

  /* Tech stack */
  .tech-stack {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .tech-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.4rem 0.8rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    transition: all 0.3s var(--transition-timing);

    img {
      width: 1.2rem;
      height: 1.2rem;
    }

    &:hover {
      background: rgba(255, 136, 0, 0.2);
      transform: translateY(-2px);
    }
  }

  /* Action buttons */
  .action-links {
    display: flex;
    gap: 1rem;
  }

  .action-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.6rem 1rem;
    border-radius: 6px;
    transition: all 0.3s var(--transition-timing);
    background: rgba(255, 136, 0, 0.1);

    img {
      width: 1.2rem;
      height: 1.2rem;
    }

    &:hover {
      background: rgba(255, 136, 0, 0.2);
      transform: translateY(-2px);
    }
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .project {
      --card-padding: 1.5rem;
      min-height: 200px;
      max-height: none;
    }

    .project-header {
      flex-direction: column;
      gap: 1rem;
    }

    .project-title {
      font-size: 1.5rem;
    }

    .project-hover {
      display: none;
    }

    .project-content {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .project:hover .project-content {
      grid-template-columns: 1fr;
    }

    .project-footer {
      flex-direction: column;
      gap: 1.5rem;
      align-items: flex-start;
    }

    .tech-stack {
      order: -1;
      justify-content: flex-start;
    }

    .action-links {
      width: 100%;
      justify-content: space-between;
    }

    .action-button {
      padding: 0.5rem 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .project {
      --card-padding: 1rem;
    }

    .project-title {
      font-size: 1.25rem;
    }

    .tech-item {
      padding: 0.3rem 0.6rem;

      img {
        width: 1rem;
        height: 1rem;
      }
    }
  }
</style>

<script>
  const cards = document.querySelectorAll(".project") as NodeListOf<Element>;

  cards.forEach((card) => {
    if (card instanceof HTMLDivElement) {
      card.addEventListener("mousemove", (e: MouseEvent) =>
        handleMouseMove(e, card)
      );

      card.addEventListener("mouseleave", () => handleLeave(card));
      card.addEventListener("mouseenter", () => handleHover(card));
    }
  });

  function handleHover(card: HTMLDivElement) {
    const hoverText = card.querySelector(
      ".project-header .project-hover .heading-4"
    ) as HTMLSpanElement;
    hoverText.innerText = "Leave to less details";
  }

  function handleLeave(card: HTMLDivElement) {
    const hoverText = card.querySelector(
      ".project-header .project-hover .heading-4"
    ) as HTMLSpanElement;
    hoverText.innerText = "Hover to more details";
  }

  function handleMouseMove(e: MouseEvent, card: HTMLDivElement) {
    const rect = card.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    (card as HTMLElement).style.setProperty("--mouse-x", `${x}px`);
    (card as HTMLElement).style.setProperty("--mouse-y", `${y}px`);
  }
</script>
